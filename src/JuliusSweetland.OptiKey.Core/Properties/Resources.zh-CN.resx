<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ALIENWARE_17" xml:space="preserve">
    <value>Alienware 17 (EyeX)</value>
  </data>
  <data name="STEELSERIES_SENTRY" xml:space="preserve">
    <value>Steelseries Sentry (EyeX)</value>
  </data>
  <data name="TOBII_EYE_TRACKER_4C" xml:space="preserve">
    <value>Tobii Eye Tracker 4C</value>
  </data>
  <data name="TOBII_PCEYE_MINI" xml:space="preserve">
    <value>Tobii PCEye Mini</value>
  </data>
  <data name="TOBII_X2_30" xml:space="preserve">
    <value>Tobii X2-30</value>
  </data>
  <data name="TOBII_X2_60" xml:space="preserve">
    <value>Tobii X2-60</value>
  </data>
  <data name="ALIENWARE_17_INFO" xml:space="preserve">
    <value>这需要 Alienware 17 游戏笔记本，使用内建的 Tobii 眼动仪。</value>
  </data>
  <data name="GAZE_TRACKER_INFO" xml:space="preserve">
    <value>这需要 ITU Gaze Tracking Library，它是能让您使用现成设备（例如摄像机、网络摄像头）的开源眼动追踪框架。</value>
  </data>
  <data name="IRISBOND_DUO_INFO" xml:space="preserve">
    <value>如果您打算搭配 Irisbond Duo 眼动仪使用 Optikey，请确认您已安装 Irisbond Duo 驱动程序。它可以从 https://www.irisbond.com/en/producto/irisbond-duo-2 下载。</value>
  </data>
  <data name="MOUSE_POSITION_INFO" xml:space="preserve">
    <value>在此模式下 Optikey 会使用鼠标光标位置作为输入而不是直接和眼动仪互动。当您想要测试 Optikey 时，您可能会选择这个模式，或是您想用其它替代输入设备，例如头部鼠标或未列入清单中的眼动仪。</value>
  </data>
  <data name="TOBII_ASSISTIVE_INFO" xml:space="preserve">
    <value>若要搭配辅助眼动仪来使用 Optikey，您需要安装新版的 Windows Control 或 Tobii Eye Tracking 引擎。若您需要使用旧版的 Tobii Windows Control 程序（包含 Tobii Gaze Interaction 设置），您需要改用鼠标位置控制 Optikey。</value>
  </data>
  <data name="TOBII_EYEX_INFO" xml:space="preserve">
    <value>此选项适用于任何 Tobii 游戏眼动仪（5, 4C, EyeX, Alienware, Steelseries等）</value>
  </data>
  <data name="VI_MYGAZE_INFO" xml:space="preserve">
    <value>唯有在您已安装 myGaze 客户端驱动程序时，才支持 Visual Interaction myGaze，但它已经不再提供下载了。若您未安装该驱动程序，你应改为选择“鼠标位置”，并搭配 myGaze EyeMousePlay 程序使用 Optikey 以移动光标。</value>
  </data>
</root>